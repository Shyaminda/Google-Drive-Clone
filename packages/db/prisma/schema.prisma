generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
	id        				String       @id @default(cuid())
	email     				String    @unique
	name		  				String
	emailVerified 		DateTime?
	image    					String?   @default("https://img.freepik.com/free-psd/3d-illustration-person-with-sunglasses_23-2149436188.jpg")
	password 					String?
	accounts					Account[]
	files		  				File[]
	fileAccess   			FileAccess[] @relation("FileAccessRecipient")
	sharedFiles   		FileAccess[] @relation("FileAccessSharer") 
	createdAt 				DateTime  @default(now())
	updatedAt 				DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  
  type               String
  provider           String
  providerAccountId  String 
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model File {
	id          	String   @id @default(cuid())
	name        	String
	url         	String
	type			  	type
	bucketField 	String   @unique
	ownerId     	String
	owner       	User     @relation(fields: [ownerId], references: [id])
	extension   	String?
	size        	Int?
	user        	String[]
	fileAccess    FileAccess[]
	createdAt   	DateTime  @default(now())
	updatedAt   	DateTime  @updatedAt

}

model FileAccess {
  id            String   @id @default(cuid())
  fileId        String
  userId        String
	sharedById    String
  accessLevel   AccessLevel @default(VIEW)
	permissions   Permission[]
	sharedAt   		DateTime?  @default(now())
  lastAccessed  DateTime?
	canShare  		Boolean  @default(false)
	deletedAt    	DateTime?
  file         	File   @relation(fields: [fileId], references: [id])
  user         	User   @relation(name: "FileAccessRecipient",fields: [userId], references: [id])
	sharedBy      User   @relation(name: "FileAccessSharer",fields: [sharedById], references: [id])

  @@unique([fileId, userId])
}

model PasswordResetToken {
	id        String   @id @default(cuid())
	email		  String
	token     String   @unique
	expiresAt DateTime

	@@unique([email, token])
}

model verificationToken {
	id        String   @id @default(cuid())
	email		  String
	token     String   @unique
	expiresAt DateTime

	@@unique([email, token])
}

enum type {
	DOCUMENT
	IMAGE
	VIDEO
	AUDIO
	OTHER
}

enum AccessLevel {
  VIEW
  EDIT
  OWNER
	DOWNLOAD
	SHARE
	FULL
}

enum Permission {
	VIEW
  DOWNLOAD
  RENAME
  SHARE
  DELETE
}
